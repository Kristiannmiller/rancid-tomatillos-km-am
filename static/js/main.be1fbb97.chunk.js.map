{"version":3,"sources":["RancidTomLogo.png","MovieCard/MovieCard.js","ApiCalls.js","MovieGrid/MovieGrid.js","Rating/Rating.js","MovieView/MovieView.js","Login/Login.js","App/App.js","serviceWorker.js","index.js"],"names":["module","exports","MovieCard","movie","userId","className","title","parseFloat","average_rating","toFixed","userRating","rating","to","id","src","poster_path","alt","release_date","ApiCalls","getAllMovies","fetch","then","response","json","data","catch","error","console","log","message","getSingleMovie","movieId","postUserLogin","userLoginInfo","method","headers","body","JSON","stringify","err","getUserRatings","postNewRating","ratingInfo","changeRating","ratingId","ok","Error","MovieGrid","state","movies","allMovies","this","props","currentUserId","ratings","forEach","find","movie_id","setState","movieCards","map","index","key","length","Component","Rating","classNames","value","count","onChange","addRating","size","activeColor","MovieView","getUserRating","singleMovieId","a","userRatings","hasRating","handleUserInput","match","params","singleMovieInfo","style","backgroundImage","backdrop_path","tagline","overview","Login","getUserInput","event","target","name","submitLogin","preventDefault","loginInfo","formFulfilled","handleSubmit","email","password","errorMessage","type","label","placeholder","toLowerCase","onClick","App","updateCurrentUser","user","history","push","handleLoginSubmit","userInfo","loginResult","handleLogout","isOnHomePage","window","location","reload","loginButtonFunction","logo","path","render","exact","withRouter","Boolean","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.be1fbb97.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/RancidTomLogo.e309505f.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport './MovieCard.css';\n\nconst MovieCard = ({ movie, userId }) => {\n  return (\n    <section className='movieCard'>\n      <h1 className='cardTitle'>{movie.title}</h1>\n      <h4>Average Rating: {parseFloat(movie.average_rating).toFixed(1)}</h4>\n      <h4>{movie.userRating && `Your Rating: ${movie.userRating.rating}`}</h4>\n      <h4>{!movie.userRating && userId && `Click to add rating`}</h4>\n      <h4>{!movie.userRating && !userId && `Sign in to add your rating`}</h4>\n      <Link to={`/${movie.id}`}>\n        <img className='poster' src={movie.poster_path} alt={movie.title + ' movie poster'}/>\n      </Link>\n      <h5>Release Date: {movie.release_date}</h5>\n    </section>\n  )\n}\nexport default MovieCard;\n\nMovieCard.propTypes = {\n  movie: PropTypes.object,\n  userId: PropTypes.number\n};\n","const ApiCalls = {\n  getAllMovies() {\n    return fetch('https://rancid-tomatillos.herokuapp.com/api/v2/movies')\n    .then(response => response.json())\n    .then(data => data)\n    .catch(error => console.log(error.message))\n  },\n\n  getSingleMovie(movieId) {\n    return fetch(`https://rancid-tomatillos.herokuapp.com/api/v2/movies/${movieId}`)\n    .then(response => response.json())\n    .then(data => data)\n    .catch(error => console.log(error.message))\n  },\n\n  postUserLogin(userLoginInfo) {\n    return fetch('https://rancid-tomatillos.herokuapp.com/api/v2/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userLoginInfo)\n    })\n    .then(response => response.json())\n    .then(data => data)\n    .catch(err => console.log('failed', err.message))\n  },\n\n  getUserRatings(userId) {\n    return fetch(`https://rancid-tomatillos.herokuapp.com/api/v2/users/${userId}/ratings`)\n    .then(response => response.json())\n    .then(data => data)\n    .catch(error => console.log(error.message))\n  },\n\n  postNewRating(userId, ratingInfo) {\n    return fetch(`https://rancid-tomatillos.herokuapp.com/api/v2/users/${userId}/ratings`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(ratingInfo)\n    })\n    .then(response => response.json())\n    .then(data => data)\n    .catch(err => console.log('failed', err.message))\n  },\n\n  changeRating(userId, ratingId) {\n    return fetch(`https://rancid-tomatillos.herokuapp.com/api/v2/users/${userId}/ratings/${ratingId}`, {\n      method: 'DELETE',\n    })\n    .then(response => {\n      if (!response.ok) throw Error\n    })\n    .catch(err => console.log('failed', err.message));\n  }\n}\n\nexport default ApiCalls;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport MovieCard from '../MovieCard/MovieCard.js';\nimport ApiCalls from '../ApiCalls.js';\nimport './MovieGrid.css';\n\nclass MovieGrid extends Component {\n  constructor() {\n    super();\n    this.state = {\n      movies: []\n    }\n  }\n\n  async componentDidMount() {\n    const allMovies = await ApiCalls.getAllMovies()\n    if(this.props.currentUserId) {\n      let userRatings = await ApiCalls.getUserRatings(this.props.currentUserId)\n      userRatings.ratings.forEach((rating) => {\n        let foundMovie = allMovies.movies.find(movie => movie.id === rating.movie_id)\n        foundMovie.userRating = rating\n      })\n    }\n    if (allMovies.movies) {\n      this.setState({movies: allMovies.movies})\n    } else {\n      this.setState({error: allMovies.error})\n    }\n  }\n\n  render() {\n    const movieCards = this.state.movies.map((movie, index) => {\n      return (\n        <MovieCard\n          key={index}\n          movie={movie}\n          userId={this.props.currentUserId}\n        />\n      )\n    })\n    return (\n      <div className='movies-container'>\n        {movieCards.length ? movieCards : this.state.error}\n      </div>\n    )\n  }\n}\nexport default MovieGrid;\n\nMovieGrid.propTypes = {\n  currentUserId: PropTypes.number\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactStars from \"react-rating-stars-component\";\nimport './Rating.css';\n\nconst Rating = (props) => {\n  return (\n    <section>\n      <h2>{props.userRating ? `Your Rating: ${props.userRating}` : 'Not yet rated'}</h2>\n      <h4>Add a rating:</h4>\n      <section className=\"starsWrapper\">\n        <ReactStars\n          classNames=\"stars\"\n          value={props.userRating}\n          id=\"movieViewStars\"\n          count={10}\n          onChange={props.addRating}\n          size={24}\n          activeColor=\"#ffd700\"\n        />\n      </section>\n    </section>\n  )\n}\n\nexport default Rating;\n\nRating.propTypes = {\n  userRating: PropTypes.number,\n  addRating: PropTypes.func\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ApiCalls from '../ApiCalls.js'\nimport Rating from '../Rating/Rating.js';\nimport './MovieView.css';\n\nclass MovieView extends Component {\n  constructor() {\n    super();\n    this.state = {\n      movie: {},\n      userRating: {},\n      hasRating: false\n    }\n  }\n\n  getUserRating = async (singleMovieId) => {\n    const userRatings = await ApiCalls.getUserRatings(this.props.currentUserId)\n    if(userRatings.ratings) {\n      const rating = userRatings.ratings.find(rating => rating.movie_id === singleMovieId)\n      rating && this.setState({userRating: rating, hasRating: true})\n    }\n  }\n\n  async componentDidMount() {\n    const singleMovieInfo = await ApiCalls.getSingleMovie(this.props.match.params.movieId)\n    if (this.props.currentUserId) {\n      this.getUserRating(singleMovieInfo.movie.id)\n    }\n    this.setState({movie: singleMovieInfo.movie})\n  }\n\n  handleUserInput = async (rating) => {\n    const ratingInfo = { movie_id: this.state.movie.id, rating: rating }\n    if (this.state.hasRating) {\n      await ApiCalls.changeRating(this.props.currentUserId, this.state.userRating.id)\n    }\n    await ApiCalls.postNewRating(this.props.currentUserId, ratingInfo)\n    this.getUserRating(this.state.movie.id)\n  }\n\n  render() {\n    return (\n      <section className='movieView' style={{backgroundImage: 'url(' + this.state.movie.backdrop_path + ')' }}>\n        <section className='movieInfo'>\n        <h3 className='movieTitle'>{this.state.movie.title}</h3>\n        <h4 className='movieTagline'>{this.state.movie.tagline}</h4>\n        <h4 className='movieOverview'>{this.state.movie.overview}</h4>\n        <h5>Release Date: {this.state.movie.release_date}</h5>\n        <h4>{!this.props.currentUserId && 'Sign in to rate this movie!'}</h4>\n        {this.props.currentUserId && this.state.hasRating && <Rating userRating={this.state.userRating.rating} addRating={this.handleUserInput}/>}\n        {this.props.currentUserId && !this.state.hasRating && <Rating addRating={this.handleUserInput}/>}\n        <h6>Average Rating: {parseFloat(this.state.movie.average_rating).toFixed(1)}</h6>\n      </section>\n    </section>\n    )\n  }\n}\n\nexport default MovieView;\n\nMovieView.propTypes = {\n  currentUserId: PropTypes.number\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './Login.css';\n\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n    }\n  }\n\n  getUserInput = event => {\n    this.setState({ [event.target.name]: event.target.value })\n  }\n\n  submitLogin = event => {\n    event.preventDefault();\n    const loginInfo = {\n      ...this.state\n    }\n    if(this.formFulfilled()) {\n      this.props.handleSubmit(loginInfo)\n    }\n  }\n\n  formFulfilled = () => {\n    if(this.state.email === '' || this.state.password === '') {\n      return false\n    } else {\n      return true\n    }\n  }\n\n  render() {\n    return (\n      <form>\n        <h2 className='errorMessage'>{!this.formFulfilled() && 'Please type your email and password to sign in'}</h2>\n        <h2 className='errorMessage'>{this.props.errorMessage}</h2>\n        <input\n          type='text'\n          label='email input'\n          placeholder='Email'\n          name='email'\n          value={this.state.email.toLowerCase()}\n          onChange={this.getUserInput}\n        />\n        <br></br>\n        <input\n          type='password'\n          label='password input'\n          placeholder='Password'\n          name='password'\n          value={this.state.password}\n          onChange={this.getUserInput}\n        />\n        <br></br>\n        <button onClick={this.submitLogin}>Login</button>\n      </form>\n    )\n  }\n}\n\nexport default Login;\n\nLogin.propTypes = {\n  handleSubmit: PropTypes.func,\n  errorMessage: PropTypes.string\n};\n","import React, { Component } from 'react';\nimport { withRouter, Route, Switch, Link, NavLink } from 'react-router-dom';\nimport MovieGrid from '../MovieGrid/MovieGrid.js';\nimport MovieView from '../MovieView/MovieView.js';\nimport ApiCalls from '../ApiCalls.js';\nimport Login from '../Login/Login.js';\nimport './App.css';\nimport logo from '../RancidTomLogo.png';\n\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: {},\n      isOnHomePage: true,\n      error: ''\n    }\n  }\n\n  updateCurrentUser = ({ user }) => {\n    this.setState({ user }, () => {this.props.history.push('/')})\n  }\n\n  handleLoginSubmit = async (userInfo) => {\n    const loginResult = await ApiCalls.postUserLogin(userInfo)\n    if (loginResult.error) {\n      this.setState({error: loginResult.error})\n    } else {\n      this.updateCurrentUser(loginResult)\n    }\n  }\n\n  handleLogout = () => {\n    this.setState({\n      user: {},\n      isOnHomePage: true\n    })\n    window.location.reload();\n  }\n\n  loginButtonFunction = () => {\n    this.setState({isOnHomePage: false})\n  }\n\n  render() {\n    return (\n      <main className='App'>\n      <Route>\n        <NavLink id=\"homeNav\" className=\"homeNav\" to=\"/\">\n          <img className='logo' src={logo} alt='Rancid Tomatillo Logo'/>\n        </NavLink>\n      </Route>\n      <header className='header'>\n        {!this.state.user.id && this.state.isOnHomePage &&\n        <Link className=\"loginLogout\" to={'/login'} onClick={() => this.loginButtonFunction()}>Login\n        </Link> }\n        {this.state.user.id &&\n        <Link className=\"loginLogout\" to={'/'} onClick={() => this.handleLogout()}>Logout\n        </Link> }\n        <section className='greeting'>{this.state.user.id && 'Welcome, ' + this.state.user.name + '!'}</section>\n      </header>\n      <Switch>\n        <Route\n          path='/login'\n          render={(props) => (\n            <Login {...props} handleSubmit={this.handleLoginSubmit} errorMessage={this.state.error} />\n          )}\n        />\n        <Route exact path=\"/\" render={() => (\n          <MovieGrid currentUserId={this.state.user.id} />\n          )}\n        />\n        <Route path=\"/:movieId\" render={(props) => (\n          <MovieView {...props} currentUserId={this.state.user.id} />\n          )}\n          />\n      </Switch>\n      </main>\n    )\n  }\n}\nexport default withRouter(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App/App.js';\nimport * as serviceWorker from './serviceWorker';\nimport './RancidTomLogo.png';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}